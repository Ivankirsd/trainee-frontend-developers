ПЛАН 4-ГО УРОКА:
Функции:
  - http://web.archive.org/web/20190405104507/http://learn.javascript.ru/function-basics
  - Сама по себе функция возвращает undefined
  - Псевдомассив arguments - см. скрин

  Практическое задание - задачи 1 и 2 с http://web.archive.org/web/20190405104507/http://learn.javascript.ru/function-basics

  - Сравнение Function Declaration и Function Expression, анонимная функция -
    http://web.archive.org/web/20190405104507/http://learn.javascript.ru/function-declaration-expression
  - Рекурсия - вызов функцией самой себя, использовать рекурсию не экономно по памяти - см. скрин
  - Чистая функция (pure function) - см. скрины
  - Callback или функция обратного вызова - это передача исполняемого кода (напр. функции) в качестве одного из параметров
    функции при её вызове, полученный код может вызываться внутри функции - см. скрины
  - Замыкания:
    - https://learn.javascript.ru/closures (до главы "Возврат функции")
    - Замыкание - это функция вместе со всеми внешними переменными, доступными ей
    - Схема замыкания - см. скрин
    - Самовызывающаяся функция (IIFE) - см. скрин - является синтаксисом замыкания
    - Слайды A.61a-b - Изоляция области видимости с помощью самовызывающейся функции

    Практическое задание - задачи 1-5 с https://learn.javascript.ru/closures

  - Каррирование:
   - Это создание новой функции путём фиксирования аргументов существующей - см. скрин
   - http://prgssr.ru/development/vvedenie-v-karrirovanie-v-javascript.html#heading-section-1 - глава "Каррируем всё"

   Практическое задание - задача 6 с https://learn.javascript.ru/closures

Домашнее задание:
  Задание 1:
    Написать функцию pow(x,n), которая возвращает x в степени n,
    иначе говоря, умножает x на себя n раз и возвращает результат.
    Запросить у пользователя x и n, а затем вывести результат pow(x,n).
    В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.

  Задание 2:
    Написать функцию sumTo(n), которая для данного n вычисляет сумму чисел от 1 до n, например:
      sumTo(1) = 1
      sumTo(2) = 2 + 1 = 3
      sumTo(3) = 3 + 2 + 1 = 6
      sumTo(4) = 4 + 3 + 2 + 1 = 10
      sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050

    Сделать три варианта решения:
      - с использованием цикла
      - через рекурсию, sumTo(n) = n + sumTo(n-1) для n > 1
      - с использованием формулы для суммы арифметической прогрессии

    Ответить на вопросы в комментариях:
      Какой вариант решения самый быстрый? Самый медленный? Почему?
      Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему?

  Задание 3 - домашнее задание N.05:
    Если работаем с числом - должна присутствовать проверка на то, что это число и оно корректно.
    Если с массивом - для определения массива метод isArray использовать запрещено.
    Необходимо нагуглить способ, как определить, что перед вами массив - с использованием только пройденных тем.
    Другие значения, помимо числа и массива, можно не обрабатывать.
    При решении также запрещено использование методов join/split и всего того, что еще не было пройдено.
    Функция должна быть чистой.